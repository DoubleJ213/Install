#! /usr/bin/env bash
# vim: tabstop=4 shiftwidth=4 softtabstop=4

#######################################################
##  Copyright (c) VRV 2012,2013 all rights reserved ###
#######################################################

# author: ZhiQiang Fan
# mailto: aji.zqfan@gmail.com

export BAK_POSTFIX=".vrv.bak"
export TIME_OUT=60

function print_critical() {
    echo ""
    echo "CRITICAL:"
    echo "CRITICAL: ""$1"
    echo "CRITICAL:"
    echo ""
    echo "press any key to exit..." 
    read -n 1
    echo ""
}

function assert_precise() {
    os_codename=$(lsb_release -c -s)
    if [ "precise" != "$os_codename" ]; then
        print_critical "the operating system must be ubuntu precise"
        exit 1
    fi
}

function assert_root() {
    if [ `whoami` != "root" ]; then
        print_critical "this program must run by root"
        exit 1
    fi
}

function assert_primary_nic_exists() {
    if [ -z "`get_primary_interface_label`" ]; then
        print_critical "primary network interface does not exist"
        exit 1
    fi
}

function assert_valid_ip_format() {
    r=`echo $1 | egrep '^[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}$'`
    if [ -z "$r" ]; then
        print_critical $1", ip format is invalid"
        exit 1
    fi
}

function assert_kvm_ok() {
    if [ `egrep -c '(vmx|svm)' /proc/cpuinfo` -eq 0 ]; then
        print_critical "virtualization technology is not supported by your CPU"
        exit 1
    fi
    r=`dmesg | grep -i "kvm: disabled by bios"`
    if [ -n "$r" ]; then
        print_critical "virtualization technology is disabled by your BIOS"
        exit 1
    fi
    return 0
}

# FIXME: validate root password for remote host
function assert_valid_password() {
    return 0
}

function is_virtual_os() {
    r=`dmesg | grep -i "Booting paravirtualized kernel on KVM"`
    if [ -n "$r" ]; then
        return 0
    else
        return 1
    fi
}

function is_valid_ipv4() {
    r=`echo $1 | egrep '^[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}$'`
    if [ -z "$r" ]; then
        echo "ip format is invalid: ""$1"
        return 1
    fi
    return 0
}

# make log dir
# log will be generate if something very important happens
function make_log_dir() {
    if [ ! -d "/var/log/vrv" ]; then
        mkdir /var/log/vrv
    fi
    if [ ! -d "/var/log/vrv/cloud" ]; then
        mkdir /var/log/vrv/cloud
    fi
}

function apt_localize() {
    # copy files from mobile device to /var/cache/apt/archives/
    # FIXME: use recursion to copy deb files
    cp ../debs/* /var/cache/apt/archives/

    # edit /etc/apt/sources.list
    # back up original file
    backup_file "/etc/apt/sources.list"
    echo "deb file:/var/cache/apt archives/" > /etc/apt/sources.list
    # update
    apt-get update
}

function apt_restore() {
    if [ -f "/etc/apt/sources.list$BAK_POSTFIX" ]; then
        cp "/etc/apt/sources.list$BAK_POSTFIX" /etc/apt/sources.list
        echo "deb file:/var/cache/apt archives/" >> /etc/apt/sources.list
    fi
}

# detect local nic and ipv4
# currently only recognize ethernet
function detect_interfaces() {
    local nics=`ip link | grep "<" | egrep -v 'lo' | awk '{print $2}' | awk -F ':' '{print $1}'`
    echo $nics
}

# check if this interface is primary
# according to route table
function is_primary_interface() {
    if [ -z "$1" ]; then
        return 1
    fi

    if [ -z "`route -nn | grep $1 | grep UG`" ]; then
        return 1
    else
        return 0
    fi
}

function get_primary_interface_label() {
    local nics=`detect_interfaces`
    for nic in $nics; do
        is_primary_interface $nic
        if [ $? -eq 0 ]; then
            echo $nic
            return 0
        fi
    done
    return 1
}

# NOTE: this function will filter virbr and vnet
function get_secondary_interface_label() {
    local nics=`detect_interfaces`
    for nic in $nics; do
        if [[ "$nic" =~ "virbr" ]]; then
            continue
        fi
        if [[ "$nic" =~ "vnet" ]]; then
            continue
        fi
        is_primary_interface $nic
        if [ $? -eq 1 ]; then
            echo $nic
            return 0
        fi
    done
    return 1
}

# get interface ipv4 address
function get_interface_ipv4() {
    if [ -z "$1" ]; then
        return 1
    fi

    local ipv4=`ifconfig $1 | grep "inet addr" | awk '{print $2}' | awk -F ':' '{print $2}'`
    echo $ipv4
}

function get_gateway() {
    gates=`ip route | grep default | awk '{print $3}'`
    for gate in $gates
    do
        if [ -n "$gate" ]; then
            echo $gate
            break
        fi
    done
}

function get_netmask() {
    netmask=`ifconfig $1 | grep "Mask:" | awk -F ':' '{print $4}'`
    echo $netmask
}

function backup_file() {
    if [ ! -f "$1""$BAK_POSTFIX" ]; then
        mv $1 "$1""$BAK_POSTFIX"
    fi
}


# from devstack/functions
# Determine OS Vendor, Release and Update
# Tested with OS/X, Ubuntu, RedHat, CentOS, Fedora
# Returns results in global variables:
# os_VENDOR - vendor name
# os_RELEASE - release
# os_UPDATE - update
# os_PACKAGE - package type
# os_CODENAME - vendor's codename for release
# GetOSVersion
GetOSVersion() {
    # Figure out which vendor we are
    if [[ -n "`which sw_vers 2>/dev/null`" ]]; then
        # OS/X
        os_VENDOR=`sw_vers -productName`
        os_RELEASE=`sw_vers -productVersion`
        os_UPDATE=${os_RELEASE##*.}
        os_RELEASE=${os_RELEASE%.*}
        os_PACKAGE=""
        if [[ "$os_RELEASE" =~ "10.7" ]]; then
            os_CODENAME="lion"
        elif [[ "$os_RELEASE" =~ "10.6" ]]; then
            os_CODENAME="snow leopard"
        elif [[ "$os_RELEASE" =~ "10.5" ]]; then
            os_CODENAME="leopard"
        elif [[ "$os_RELEASE" =~ "10.4" ]]; then
            os_CODENAME="tiger"
        elif [[ "$os_RELEASE" =~ "10.3" ]]; then
            os_CODENAME="panther"
        else
            os_CODENAME=""
        fi
    elif [[ -x $(which lsb_release 2>/dev/null) ]]; then
        os_VENDOR=$(lsb_release -i -s)
        os_RELEASE=$(lsb_release -r -s)
        os_UPDATE=""
        if [[ "Debian,Ubuntu" =~ $os_VENDOR ]]; then
            os_PACKAGE="deb"
        else
            os_PACKAGE="rpm"
        fi
        os_CODENAME=$(lsb_release -c -s)
    elif [[ -r /etc/redhat-release ]]; then
        # Red Hat Enterprise Linux Server release 5.5 (Tikanga)
        # CentOS release 5.5 (Final)
        # CentOS Linux release 6.0 (Final)
        # Fedora release 16 (Verne)
        os_CODENAME=""
        for r in "Red Hat" CentOS Fedora; do
            os_VENDOR=$r
            if [[ -n "`grep \"$r\" /etc/redhat-release`" ]]; then
                ver=`sed -e 's/^.* \(.*\) (\(.*\)).*$/\1\|\2/' /etc/redhat-release`
                os_CODENAME=${ver#*|}
                os_RELEASE=${ver%|*}
                os_UPDATE=${os_RELEASE##*.}
                os_RELEASE=${os_RELEASE%.*}
                break
            fi
            os_VENDOR=""
        done
        os_PACKAGE="rpm"
    fi
    export os_VENDOR os_RELEASE os_UPDATE os_PACKAGE os_CODENAME
}

# from devstack/functions
# Distro-agnostic function to tell if a package is installed
# is_package_installed package [package ...]
function is_package_installed() {
    if [[ -z "$@" ]]; then
        return 1
    fi

    if [[ -z "$os_PACKAGE" ]]; then
        GetOSVersion
    fi
    if [[ "$os_PACKAGE" = "deb" ]]; then
        dpkg -l "$@" > /dev/null
        return $?
    else
        rpm --quiet -q "$@"
        return $?
    fi
}

